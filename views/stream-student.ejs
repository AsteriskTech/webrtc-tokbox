<!-- permanent redirect to heroku web server from joogaia-->
<!DOCTYPE HTML><html lang="en"><head><meta charset="UTF-8"/>
<style>
  #video-check span.cross {
    position: relative;
    margin-left: -11px;
    margin-right: 6px;
    color: red;
    font-weight:bold;
  }
  #video-check.active span.cross {
    display: none;
  }
  #video-check img {
    zoom: 0.5;
    position: relative;
    margin-top:-5.1px;
  }
  #connectWindow button{
    margin-bottom:10px !important;
  }
  #canvas {
    position:relative;
    width:100%;
    height:100%;
    border:1px solid blue;
    display:none;
    background: #000;
  }
  #user {
    position:absolute;
    top:0;
    right:0;
    width:120px;
    height:90px;
    background-color:#000;
    border:1px solid gray;
  }
  #user-names{
    border:1px solid gray;
    position:absolute;
    right:0;
    width:120px;
    top:100px;
    color:#fff;
  }
  #teacher {
    width:512px;
    height:384px;
    background-color:#333;
    border:1px solid #000;
  }
</style>
</head><body>
<div id="connectWindow" class="hero-unit">
  <!-- number of available streams 16/20 -->
  <label id="connections">Available <span>20</span> seats</label>
  <input type="text" id="publisherName" value="Type your name" onclick="if(this.value == 'Type your name') this.value='' "/>
  <button class="btn" id="connect" disabled onclick="connectToStream(event)">Connect</button>
  <button class="btn" style="display:none" id="fullscreen" onclick="requestFullScreen(event)">Fullscreen</button>
  <!-- turn on/off the video -->
  <ul class="nav nav-pills"><li class="active" id="video-check"><a href="#video=on" onclick="return false"><img src="http://s3.amazonaws.com/spweb-uploads/2012/10/Video_icon.png"/><span class="cross">/</span> Video</a></li></ul>
  <div id="preview">
    <!-- teacher preview video goes here -->
  </div>
</div>
<div id="canvas">
  <div id="teacher"></div>
  <div id="user"></div>
</div>
<div id="students">
  <!--
    display list of users subscribed and 
    who published their video/name
  -->
  <div>John Smith</div>
  <div>Amanda Hamilton</div>
  <div>Steve Jobs</div>
</div>
<link href="/bootstrap/css/bootstrap.min.css" rel="stylesheet" media="screen"/>
<link href="/bootstrap/css/bootstrap-responsive.min.css" rel="stylesheet" media="screen"/>
<script type="text/javascript" src="https://swww.tokbox.com/webrtc/v2.0/js/TB.min.js"></script>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script type="text/javascript" src="/bootstrap/js/bootstrap.min.js"></script>
<script type="text/javascript">
  // Initialize API key, session, and token, generated from server side
  var apiKey = "<%= OpenTokKey %>";
  var sessionId = "<%= sessionId %>";
  var token = "<%= token %>";
  var teacherStream;
  var subscriber;
  var publisher;
  var screen = {
    /*
    1024x768
    
    teacher:
    w2 = (1024);
    h2 = w2 * h / w
    students:
    w2 = (1024/5);
    h2 = w * h / w
    */
    videoWidth: function(m) {
      m = m || 1;
      return ((this.width) - 2/*px border*/*5) * m;
    },
    videoHeight: function(w, h, m) {
      m = m || 1;
      return ((((this.width) - 2/*px border*/*5) * m) * h) / w;
    }
  };

  // Enable console logs for debugging
  TB.setLogLevel(TB.WARN);

  // Initialize session, set up event listeners, and connect
  var session = TB.initSession(sessionId);
  session.on('sessionConnected', sessionConnectedHandler);
  session.on("connectionCreated", connectionCreatedHandler);
  session.on('connectionDestroyed', connectionDestroyed);
  session.on('streamCreated', streamCreatedHandler);
  session.on('streamModified', streamModifiedHandler);
  session.on('streamDestroyed', streamDestroyedHandler);
  session.connect(apiKey, token);

  $('#video-check a').click(function(e) {
    $(this).parent().toggleClass('active');
  });
  $(window).resize(function() {
    // reference to http://davidwalsh.name/fullscreen
    if(!document.webkitFullscreenElement &&
       !document.mozFullscreenElement && 
       !window.fullScreen) {
      // if user ends the fullscreen mode
      // make sure to hide canvas and show connection window
      $("#connectWindow").show();
      // $("#canvas").hide();
      // but keep the session do not republish it
    }
  });
  
  function canvasHandler() {
    // catch the window screen size at the correct moment
    screen = $.extend(screen, {
              width: $(window).width(),
              height: $(window).height()});

    // Create publisher and start streaming into the session
    //todo: keep small window and request share camera when accessing the page
    if($("#user video").length == 0) {
      $("#user").append($("<div></div>").attr('id', session.connection.id));
      publisher = TB.initPublisher(apiKey, session.connection.id, {
        // will depend on the view (teacher/student)
        width: 120, 
        height: 90, 
        name: $("#publisherName").val(),
        publishVideo: $('#video-check').hasClass('active')
      });
      session.publish(publisher);
    }
    // make sure to hide connection window after connection
    //$("#connectWindow").hide();
    $("#canvas").show();
    
    // Subscribe to streams that were in the session when we connected
    // Be sure to unsubscribe previewed teacher's view
    // Create teacher's div
    session.unsubscribe(subscriber);
    //todo: keep teacher element, but create inner div
    //      for every new connection
    // subscribe when no teacher
    if($("#teacher video").length == 0) {
      $('#teacher').append($('<div id="teacher-video"></div>'));
      subscribeToStream(teacherStream, { 
        width: screen.videoWidth(), 
        height: screen.videoHeight(512, 384), 
        div: $('#teacher div:first').get(0)
      });
    }
    // remove on window resize handler, we need it only once
    $(window).off('resize', canvasHandler);
  }

  function requestFullScreen(event) {
    // enable full screen mode for canvas only
    $(window).on('resize', canvasHandler);
    // reference to http://www.sitepoint.com/html5-full-screen-api/    
    if (_checkMethod(document, "FullScreen") 
     || _checkMethod(document, "IsFullScreen")) {
        _checkMethod(document, "CancelFullScreen");
    } else {
      _checkMethod($("#canvas").get(0), "RequestFullScreen");
    }
  }

  function connectToStream(e) {
    console.debug("connect button", event);
    canvasHandler();
  }

  function connectionCreatedHandler(event) {
    console.debug('connection created', event);
    updateConnectionInfo();
  }

  var destroyedEvent;
  //todo-debug
  //reconsider for the same session
  //give a warning, only needed when teacher is leaving the class
  function connectionDestroyed(event) {
    console.debug("connection destroyed", event);
    destroyedEvent = event;
    if(event.connections[0] == teacherStream.connection &&
      publisher != null) {
      session.unpublish(publisher);
      $("#fullscreen").hide();
      $("#connect").show();
    }
    updateConnectionInfo();

    //subscriber = null;
    //teacherStream = null;

    //session.disconnect();
    //session.connect(apiKey, token);

    //$("#connect").attr('disabled', 'disabled');
    //$('#connections span:first').text(20);
    
    // make sure return the connectionWindow
    // and hide canvas
    //$("#connectWindow").show();
    //$("#canvas").hide();
  }
  
  var createdEvent;
  function sessionConnectedHandler(event) {
    console.debug("session connected", event);
    createdEvent = event;

    createSubscription(event.streams);
  }

  var createdStreamEvent;
  function streamCreatedHandler(event) {
    console.debug('stream created', event);
    createdStreamEvent = event;
    // Subscribe to any new streams that are created

    createSubscription(event.streams);
    // activate fullscreen button
    if($("#user video").length > 0) {
      $("#fullscreen").show();
      $("#connect").hide();
    }
  }

  function streamModifiedHandler(event) {
    console.debug('stream modified', event);
  }

  function streamDestroyedHandler(event) {
    console.debug("stream destroyed", event);
  }

  function updateConnectionInfo() {
    $('#connections span:first').text(20 - session.streams.length);
    if(session.streams.length > 0) $("#connect").removeAttr('disabled');
    else $("#connect").attr('disabled', 'disabled');
  }

  function createSubscription(streams) {
    console.debug("subscription streams", streams);
    updateConnectionInfo();

    if(streams.length > 0) {
      // sort streams
      streams = streams.sort(function(a, b) {
        // show the earliest first
        return a.creationTime - b.creationTime; 
      });

      if($("#preview video").length == 0) {
        subscribeToTeacher(streams);
      }
      subscribeToStudends(streams);
    }
  }

  function subscribeToTeacher(streams) {
    // Make sure to do it only when teacher is not yet added to main view
    if($("#teacher video").length == 0) {
      var teacher = $('<div id="stream-teacher"></div>');
      $("#preview").append(teacher);
      teacherStream = streams.shift();
      subscriber = subscribeToStream(teacherStream, { div: teacher.get(0) });
    }
  }

  function subscribeToStudends(streams) {
    // subscribe to other students audio
    for(var i = 0; i < streams.length; i++) {
      // Make sure we don't subscribe to ourself
      if (streams[i].connection.connectionId == session.connection.connectionId) continue;
      // dod not subscribe to teacher stream audio
      if(streams[i] == teacherStream) continue;
      // Create the div to put the subscriber element in to
      var student = $('<div></div>').attr('id', streams[i].streamId);
      $($("#students div").get(i)).html(student);
      subscribeToStream(streams[i], { 
        div: student.get(0),
        subscribeToVideo: false
      });
    }
  }

  function subscribeToStream(stream, options) {
    options = $.extend({width: 120, height: 90}, options || {});

    // Subscribe to the stream
    var subscriber = session.subscribe(stream, options.div.id, options);
    subscriber.setStyle({nameDisplayMode: 'on'})

    // check the session mute event
    session.on('signal:mute', function (e) {
      console.debug("mute event", e.data);
      publisher.publishAudio(e.data.sound);
    });

    return subscriber;
  }
</script>
<script>
  // unified fullscreen method for cross browser
  // todo: remove ugly method, supported are Chrome and Mozilla
  var pfx = ["webkit", "moz", "ms", "o", ""];
  function _checkMethod(obj, method) {
    var p = 0, m, t;
    while (p < pfx.length && !obj[m]) {
      m = method;
      if (pfx[p] == "") {
        m = m.substr(0,1).toLowerCase() + m.substr(1);
      }
      m = pfx[p] + m;
      t = typeof obj[m];
      if (t != "undefined") {
        pfx = [pfx[p]];
        return (t == "function" ? obj[m]() : obj[m]);
      }
      p++;
    }
  }
</script>
</body></html>
