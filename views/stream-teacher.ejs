<!-- permanent redirect to heroku web server from joogaia-->
<!DOCTYPE HTML><html lang="en"><head><meta charset="UTF-8"/>
<style>
  #video-check span.cross {
    position: relative;
    margin-left: -11px;
    margin-right: 6px;
    color: red;
    font-weight:bold;
  }
  #video-check.active span.cross {
    display: none;
  }
  #video-check img {
    zoom: 0.5;
    position: relative;
    margin-top:-5.1px;
  }
  #connectWindow button{
    margin-bottom:10px !important;
  }
  #canvas {
    position:relative;
    width:100%;
    border:1px solid blue;
    display:none;
    background:#000;
  }
  #user {
    width:240px;
    height:180px;
    background-color:#000;
    border:2px solid gray;
    float:left;
  }
  #students .student {
    border:1px solid gray;
    width:120px;
    height:90px;
    float:left;
  }
  #user-names p{
    float:left
  }
  #user-names p:not(:last-child):after {
    content:',';
    margin-right:0.2em;
  }
</style>
</head><body>
<div id="connectWindow" class="hero-unit">
  <!-- number of available streams 16/20 -->
  <!--label id="connections">Available <span>20</span> seats</label-->
  <input type="text" id="publisherName" value="Type you name" onclick="if(this.value == 'Type you name') this.value='' "/>
  <button class="btn" id="connect" disabled onclick="connectToStream(event)">Create your class</button>
</div>
<div id="canvas">
  <div id="user">
    <!-- user window -->
  </div>
  <div id="students">
    <!-- 10 -->
    <div class="student"></div>
    <div class="student"></div>
    <div class="student"></div>
    <div class="student"></div>
    <div class="student"></div>
    <div class="student"></div>
    <div class="student"></div>
    <div class="student"></div>
    <div class="student"></div>
    <div class="student"></div>
    <!-- 20 -->
    <div class="student"></div>
    <div class="student"></div>
    <div class="student"></div>
    <div class="student"></div>
    <div class="student"></div>
    <div class="student"></div>
    <div class="student"></div>
    <div class="student"></div>
    <div class="student"></div>
    <div class="student"></div>
    <!-- students go here -->
    <!--
    it would be a 3x2 grid filling the screen, 
    or a 3x3 or 4x3 grid and eventually 
    5x4 if there are 20 or almost 20
    -->
  </div>
  <div style="clear:both"></div>
  <div id="user-names">
    <!--
      display list of users subscribed and 
      who published their video/name
      after 20 people, no video of them displayed
    -->
    <!--p>John Smith</p>
    <p>Amanda Hamilton</p>
    <p>Steve Jobs</p-->
  </div>
  <div style="clear:both"></div>
</div>
<link href="/bootstrap/css/bootstrap.min.css" rel="stylesheet" media="screen"/>
<link href="/bootstrap/css/bootstrap-responsive.min.css" rel="stylesheet" media="screen"/>
<script type="text/javascript" src="https://swww.tokbox.com/webrtc/v2.0/js/TB.min.js"></script>
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script type="text/javascript" src="/bootstrap/js/bootstrap.min.js"></script>
<script type="text/javascript">
  // Initialize API key, session, and token, generated from server side
  var apiKey = "<%= OpenTokKey %>";
  var sessionId = "<%= sessionId %>";
  var token = "<%= token %>";
  var publisher;
  var screen = {
    /*
    1024x768
    
    teacher:
    w2 = (1024/5)*2;
    h2 = w2 * h / w
    students:
    w2 = (1024/5);
    h2 = w * h / w
    */
    videoWidth: function(m) {
      m = m || 1;
      return ((this.width/5) - 2/*px border*/*5) * m;
    },
    videoHeight: function(w, h, m) {
      m = m || 1;
      return ((((this.width/5) - 2/*px border*/*5) * m) * h) / w;
    }
  };

  // Enable console logs for debugging
  TB.setLogLevel(TB.DEBUG);

  // Initialize session, set up event listeners, and connect
  var session = TB.initSession(sessionId);
  session.addEventListener('sessionConnected', sessionConnectedHandler);
  session.addEventListener("connectionCreated", connectionCreatedHandler);
  session.addEventListener('streamCreated', streamCreatedHandler);
  session.addEventListener('streamModified', streamModifiedHandler);
  session.connect(apiKey, token);
  $('#video-check a').click(function(e) {
    $(this).parent().toggleClass('active');
  });

  $(window).resize(function() {
    // reference to http://davidwalsh.name/fullscreen
    if(document.webkitFullscreenElement == null) {
      // if user ends the fullscreen mode
      // make sure to hide canvas and show connection window
      $("#connectWindow").show();
      $("#canvas").hide();
      // but keep the session do not republish it
    }
  });
  
  function enterFullScreenHandler() {  
    console.debug($(window).width(), 
                  $(window).height(), document.webkitFullscreenElement);
    
    // catch the window screen size at the correct moment
    screen = $.extend(screen, {
              width: $(window).width(),
              height: $(window).height()});
              
    // onclick create publisher
    // create publisher and start streaming into the session
    // subscribe to resize window
    publisher = TB.initPublisher(apiKey, 'user', {
      // will depend on the view (teacher/student)
      // 240x180
      width: screen.videoWidth(2), 
      height: screen.videoHeight(240, 180, 2), 
      name: document.getElementById("publisherName").value,
      //publishVideo: $('#video-check').hasClass('active')
    });
    session.publish(publisher);
    // make sure to hide connection window after connection
    $("#connectWindow").hide();
    $("#canvas").show();
    
    // remove on window resize handler, we need it only once
    $(window).off('resize', enterFullScreenHandler);
  }

  function createPublisherHandler() {
    // subscribe to resize window
  }
  
  function connectToStream(e) {
    // enable full screen mode for canvas only
    // handle publisher then
    $(window).on('resize', enterFullScreenHandler);
    // reference to http://www.sitepoint.com/html5-full-screen-api/
    if (_checkMethod(document, "FullScreen") 
     || _checkMethod(document, "IsFullScreen")) {
        _checkMethod(document, "CancelFullScreen");
    } else {
      _checkMethod($("#canvas").get(0), "RequestFullScreen");
    }

    // no need to connect, stream is always empty
    // Subscribe to streams that were in the session when we connected
    // subscribeToStreams(event.streams);
  }
  
  function sessionConnectedHandler(event) {
    $('#connections span:first').text(20 - event.streams.length);
    $("#connect").removeAttr('disabled');
  }

  function connectionCreatedHandler(event) {
    console.debug('connections', event.connections.length);
  }
  
  function streamModifiedHandler(event) {
    console.debug('stream modified', event);
  }
  
  function streamCreatedHandler(event) {
    // Subscribe to any new streams that are created
    subscribeToStudents(event.streams);
  }

  function subscribeToStudents(streams) {
    console.debug("Create students");
    // adjust scale for video
    var options = {
      width: screen.videoWidth(), 
      height: screen.videoHeight(120, 90)};
    // adjust scale styles for student
    $('#students .student').css({
       width: options.width + 'px',
       height: options.height + 'px'});

    for (var i = 0; i < streams.length; i++) {
      // Make sure we don't subscribe to ourself
      if (streams[i].connection.connectionId == session.connection.connectionId) {
        return;
      }

      // Create the div to put the subscriber element in to
      var student = $('<div></div>').attr('id', streams[i].streamId);
      $($("#students .student").get(i)).html(student);

      // Subscribe to the stream
      var subscriber = session.subscribe(streams[i], student.get(0).id, options);
      subscriber.setStyle({nameDisplayMode: 'on'});
      // remove audio subscription
      subscriber.subscribeToAudio(false);
    }
  }
  
  // unified fullscreen method for cross browser
  var pfx = ["webkit", "moz", "ms", "o", ""];
  function _checkMethod(obj, method) {
    var p = 0, m, t;
    while (p < pfx.length && !obj[m]) {
      m = method;
      if (pfx[p] == "") {
        m = m.substr(0,1).toLowerCase() + m.substr(1);
      }
      m = pfx[p] + m;
      t = typeof obj[m];
      if (t != "undefined") {
        pfx = [pfx[p]];
        return (t == "function" ? obj[m]() : obj[m]);
      }
      p++;
    }
  }
</script>
</body></html>
